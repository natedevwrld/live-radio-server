import type { Token } from '../base/token.types';
import type { ProviderConfig, InjectableDeclaration } from './provider.types';
export declare const injectable: <P extends Token<unknown>, Deps extends readonly import("../base/token.types").TokenDec<Token<any>>[]>(dec: {
    provide: P;
} & ({
    useFactory: (...deps: import("../base/token.types").TokensDeclarationProvide<Deps>) => import("../base/token.types").TokenProvide<P>;
    scope?: "singleton" | "scoped" | "transient" | undefined;
    inject: Deps;
    useValue?: undefined;
} | {
    useFactory: () => import("../base/token.types").TokenProvide<P>;
    scope?: "singleton" | "scoped" | "transient" | undefined;
    inject?: undefined;
    useValue?: undefined;
} | {
    useFactory?: undefined;
    scope?: undefined;
    inject?: undefined;
    useValue: import("../base/token.types").TokenProvide<P>;
})) => InjectableDeclaration<P, Deps>;
