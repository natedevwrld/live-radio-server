import type { TodoAny } from './util.types';
/**
 * Regular token type providing value T.
 */
export declare type Token<T> = {
    symbol: symbol;
    type?: T;
    optionalValue?: T;
    multi?: true;
};
/**
 * Regular token provided value type
 */
export declare type TokenProvide<T> = T extends Token<infer A> ? A : never;
/**
 * Token declaration type. This is the interface tokens are declared in inject field
 */
export declare type TokenDec<T> = T | {
    token: T;
    optional: true;
};
/**
 * Token declaration provided value type. It takes into account the optionality and multiness of a token
 */
export declare type TokenDecProvide<T> = T extends TokenDec<infer A> & {
    optional: true;
} ? A extends Token<infer B> & {
    multi: true;
} ? B[] : A extends Token<infer B> ? B | undefined : never : T extends TokenDec<infer A> ? A extends Token<infer B> & {
    multi: true;
} ? B[] : A extends Token<infer B> ? B : never : never;
/**
 * Tuple of token declarations.
 */
export declare type TokenDecTuple = readonly [...ReadonlyArray<TokenDec<Token<TodoAny>>>];
/**
 * Tuple of token declaration provided value types
 */
export declare type TokensDeclarationProvide<DepToks extends TokenDecTuple> = {
    +readonly [Index in keyof DepToks]: TokenDecProvide<DepToks[Index]>;
};
