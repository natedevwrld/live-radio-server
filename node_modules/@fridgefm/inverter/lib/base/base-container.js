"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createBaseContainer = void 0;
/* eslint-disable @typescript-eslint/no-use-before-define */
const internals_1 = require("./internals");
const errors_1 = require("./errors");
/**
 * Creates a base container where each token and provider have to be manually binded to each other
 */
const createBaseContainer = (parentContainer) => {
    const values = new Map();
    const factories = new Map();
    const multies = new Map();
    const container = {
        bindValue(token, value) {
            if ((0, internals_1.isInternalToken)(token)) {
                return;
            }
            if (token.multi) {
                const prevMulties = multies.get(token.symbol) || [];
                multies.set(token.symbol, [...prevMulties, { value }]);
                return;
            }
            if (factories.has(token.symbol)) {
                factories.delete(token.symbol);
            }
            values.set(token.symbol, value);
        },
        bindFactory(token, factory, options) {
            if ((0, internals_1.isInternalToken)(token)) {
                return;
            }
            if (values.has(token.symbol)) {
                values.delete(token.symbol);
            }
            if (token.multi) {
                const prevMulties = multies.get(token.symbol) || [];
                multies.set(token.symbol, [...prevMulties, { factory, scope: options === null || options === void 0 ? void 0 : options.scope }]);
                return;
            }
            factories.set(token.symbol, { factory, options });
        },
        hasToken(token) {
            var _a;
            return values.has(token.symbol) || factories.has(token.symbol) || ((_a = parentContainer === null || parentContainer === void 0 ? void 0 : parentContainer.hasToken(token)) !== null && _a !== void 0 ? _a : false);
        },
        get(token) {
            const value = resolver(token, container);
            if (value !== internals_1.NOT_FOUND_SYMBOL) {
                return value;
            }
            if (token.optionalValue) {
                return token.optionalValue;
            }
            throw new errors_1.ResolverError([token]);
        },
        resolve(token) {
            const value = resolver(token, container);
            if (value !== internals_1.NOT_FOUND_SYMBOL) {
                return value;
            }
            if (token.optionalValue) {
                return token.optionalValue;
            }
            return internals_1.NOT_FOUND_SYMBOL;
        },
    };
    function resolver(token, origin) {
        var _a;
        if (token.multi) {
            const findInParent = () => {
                const parentResolver = parentContainer === null || parentContainer === void 0 ? void 0 : parentContainer.get(internals_1.INTERNAL_TOKENS.RESOLVER);
                if (parentResolver) {
                    const resolved = parentResolver(token, origin);
                    return Array.isArray(resolved) ? resolved : [];
                }
                return [];
            };
            const multiFactories = multies.get(token.symbol);
            if (typeof multiFactories === 'undefined') {
                return findInParent();
            }
            const resolved = multiFactories.map((multiRecord, index) => {
                if ('value' in multiRecord) {
                    return multiRecord.value;
                }
                const scope = multiRecord.scope || internals_1.DEFAULT_SCOPE;
                if (scope === 'singleton') {
                    // if it is a singleton - cache it
                    const value = multiRecord.factory(container);
                    multiFactories[index] = { value };
                    return value;
                }
                return multiRecord.factory(container);
            });
            return [...resolved, ...findInParent()];
        }
        const arrivedValue = values.get(token.symbol);
        const hasValue = arrivedValue !== undefined || values.has(token.symbol);
        if (hasValue && origin === container) {
            return arrivedValue;
        }
        const factoryContext = factories.get(token.symbol);
        if (factoryContext) {
            const scope = ((_a = factoryContext.options) === null || _a === void 0 ? void 0 : _a.scope) || internals_1.DEFAULT_SCOPE;
            switch (scope) {
                case 'singleton': {
                    if (hasValue) {
                        return arrivedValue;
                    }
                    else if (parentContainer === null || parentContainer === void 0 ? void 0 : parentContainer.hasToken(token)) {
                        break;
                    }
                    else {
                        // Cache the value in the same container where the factory is registered.
                        const value = factoryContext.factory(container);
                        container.bindValue(token, value);
                        return value;
                    }
                }
                case 'scoped': {
                    // Create a value within the origin container and cache it.
                    const value = factoryContext.factory(origin);
                    origin.bindValue(token, value);
                    return value;
                }
                case 'transient': {
                    // Create a value within the origin container and don't cache it.
                    return factoryContext.factory(origin);
                }
            }
        }
        if (hasValue) {
            return arrivedValue;
        }
        const parentResolver = parentContainer === null || parentContainer === void 0 ? void 0 : parentContainer.get(internals_1.INTERNAL_TOKENS.RESOLVER);
        if (parentResolver) {
            return parentResolver(token, origin);
        }
        return internals_1.NOT_FOUND_SYMBOL;
    }
    const bindInternalTokens = () => {
        values.set(internals_1.INTERNAL_TOKENS.CONTAINER.symbol, container);
        values.set(internals_1.INTERNAL_TOKENS.RESOLVER.symbol, resolver);
        values.set(internals_1.INTERNAL_TOKENS.FACTORIES_MAP.symbol, factories);
        if (parentContainer) {
            values.set(internals_1.INTERNAL_TOKENS.PARENT_CONTAINER.symbol, parentContainer);
        }
    };
    bindInternalTokens();
    return container;
};
exports.createBaseContainer = createBaseContainer;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS1jb250YWluZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvYmFzZS9iYXNlLWNvbnRhaW5lci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw0REFBNEQ7QUFDNUQsMkNBQWdHO0FBQ2hHLHFDQUF5QztBQU96Qzs7R0FFRztBQUNJLE1BQU0sbUJBQW1CLEdBQUcsQ0FBQyxlQUEyQixFQUFhLEVBQUU7SUFDNUUsTUFBTSxNQUFNLEdBQWMsSUFBSSxHQUFHLEVBQW1CLENBQUM7SUFDckQsTUFBTSxTQUFTLEdBQWlCLElBQUksR0FBRyxFQUFtQyxDQUFDO0lBQzNFLE1BQU0sT0FBTyxHQUFlLElBQUksR0FBRyxFQUFxQyxDQUFDO0lBRXpFLE1BQU0sU0FBUyxHQUFjO1FBQzNCLFNBQVMsQ0FBSSxLQUFlLEVBQUUsS0FBUTtZQUNwQyxJQUFJLElBQUEsMkJBQWUsRUFBQyxLQUFLLENBQUMsRUFBRTtnQkFDMUIsT0FBTzthQUNSO1lBRUQsSUFBSSxLQUFLLENBQUMsS0FBSyxFQUFFO2dCQUNmLE1BQU0sV0FBVyxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FBQztnQkFDcEQsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLENBQUMsR0FBRyxXQUFXLEVBQUUsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUM7Z0JBQ3ZELE9BQU87YUFDUjtZQUVELElBQUksU0FBUyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLEVBQUU7Z0JBQy9CLFNBQVMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO2FBQ2hDO1lBRUQsTUFBTSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ2xDLENBQUM7UUFDRCxXQUFXLENBQUksS0FBZSxFQUFFLE9BQW9DLEVBQUUs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