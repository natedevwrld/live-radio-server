"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.playlistProvider = exports.PLAYLIST_TOKEN = void 0;
const inverter_1 = require("@fridgefm/inverter");
const fs_1 = require("../../utils/fs");
const time_1 = require("../../utils/time");
const events_provider_1 = require("../events/events.provider");
const track_provider_1 = require("../track/track.provider");
const funcs_1 = require("../../utils/funcs");
const mp3_1 = __importDefault(require("../../utils/mp3"));
exports.PLAYLIST_TOKEN = (0, inverter_1.createToken)('playlist');
exports.playlistProvider = (0, inverter_1.injectable)({
    provide: exports.PLAYLIST_TOKEN,
    scope: 'singleton',
    useFactory: (createTrack, eventBus) => {
        const folders = new Set();
        let currentIndex = -1;
        let tracksMap = new Map();
        let list = [];
        const emitInfo = (a) => {
            eventBus.emit(events_provider_1.PUBLIC_EVENTS.INFO, Object.assign({ name: 'playlist' }, a));
        };
        const revalidate = () => {
            const ct = (0, time_1.captureTime)();
            list = (0, fs_1.createList)(Array.from(folders));
            tracksMap = list
                .filter((path) => {
                const f = (0, funcs_1.extractLast)(path, '/');
                return mp3_1.default.isSupported(f[1]);
            })
                .reduce((acc, path) => {
                // deduplicate if already in map
                if (acc.has(path)) {
                    return acc;
                }
                return acc.set(path, createTrack(path));
            }, new Map());
            const result = publicPlaylist.getList();
            emitInfo({ event: 'revalidate', message: 'Playlist revalidated', timings: ct() });
            return result;
        };
        const publicPlaylist = {
            getList: () => list.map((v, i) => {
                const tra = tracksMap.get(v);
                return Object.assign(Object.assign({}, tra), { isPlaying: currentIndex === i });
            }),
            getNext: () => {
                if (list.length - 1 === currentIndex) {
                    // the playlist drained
                    const ct = (0, time_1.captureTime)();
                    revalidate();
                    currentIndex = 0;
                    eventBus.emit(events_provider_1.PUBLIC_EVENTS.RESTART, publicPlaylist.getList(), ct());
                }
                else {
                    currentIndex += 1;
                }
                const nextPath = list[currentIndex];
                const nextTrack = tracksMap.get(nextPath);
                if (!nextTrack) {
                    emitInfo({ level: 'warn', event: 'no-next-track', message: `No next track found for ${nextPath}` });
                    // try next tracks
                    return publicPlaylist.getNext();
                }
                nextTrack.playCount += 1;
                return Object.assign(Object.assign({}, nextTrack), { isPlaying: true });
            },
            addFolder: (folder) => {
                folders.add(folder);
                return revalidate();
            },
            reorder: (cb) => {
                const ct = (0, time_1.captureTime)();
                const prevList = publicPlaylist.getList();
                const currentlyPlaying = prevList.find((v) => !!v.isPlaying);
                list = cb(prevList).map((b) => b.fsStats.fullPath);
                currentIndex = list.findIndex((v) => v === (currentlyPlaying === null || currentlyPlaying === void 0 ? void 0 : currentlyPlaying.fsStats.fullPath));
                emitInfo({
                    level: 'info',
                    event: 'reorder',
                    message: 'Playlist reordered',
                    timings: ct(),
                });
                return publicPlaylist.getList();
            },
        };
        return publicPlaylist;
    },
    inject: [track_provider_1.TRACK_FACTORY_TOKEN, events_provider_1.EVENT_BUS_TOKEN],
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGxheWxpc3QucHJvdmlkZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvcHJvdmlkZXJzL3BsYXlsaXN0L3BsYXlsaXN0LnByb3ZpZGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLGlEQUE2RDtBQUM3RCx1Q0FBNEM7QUFDNUMsMkNBQStDO0FBQy9DLCtEQUEyRTtBQUMzRSw0REFBOEQ7QUFDOUQsNkNBQWdEO0FBQ2hELDBEQUFrQztBQU1yQixRQUFBLGNBQWMsR0FBRyxJQUFBLHNCQUFXLEVBQVksVUFBVSxDQUFDLENBQUM7QUFFcEQsUUFBQSxnQkFBZ0IsR0FBRyxJQUFBLHFCQUFVLEVBQUM7SUFDekMsT0FBTyxFQUFFLHNCQUFjO0lBQ3ZCLEtBQUssRUFBRSxXQUFXO0lBQ2xCLFVBQVUsRUFBRSxDQUFDLFdBQVcsRUFBRSxRQUFRLEVBQUUsRUFBRTtRQUNwQyxNQUFNLE9BQU8sR0FBZ0IsSUFBSSxHQUFHLEVBQUUsQ0FBQztRQUN2QyxJQUFJLFlBQVksR0FBRyxDQUFDLENBQUMsQ0FBQztRQUN0QixJQUFJLFNBQVMsR0FBYSxJQUFJLEdBQUcsRUFBRSxDQUFDO1FBQ3BDLElBQUksSUFBSSxHQUFhLEVBQUUsQ0FBQztRQUV4QixNQUFNLFFBQVEsR0FBRyxDQUFDLENBQVksRUFBRSxFQUFFO1lBQ2hDLFFBQVEsQ0FBQyxJQUFJLENBQUMsK0JBQWEsQ0FBQyxJQUFJLGtCQUFJLElBQUksRUFBRSxVQUFVLElBQUssQ0FBQyxFQUFHLENBQUM7UUFDaEUsQ0FBQyxDQUFDO1FBRUYsTUFBTSxVQUFVLEdBQUcsR0FBRyxFQUFFO1lBQ3RCLE1BQU0sRUFBRSxHQUFHLElBQUEsa0JBQVcsR0FBRSxDQUFDO1lBQ3pCLElBQUksR0FBRyxJQUFBLGVBQVUsRUFBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7WUFDdkMsU0FBUyxHQUFHLElBQUk7aUJBQ2IsTUFBTSxDQUFDLENBQUMs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