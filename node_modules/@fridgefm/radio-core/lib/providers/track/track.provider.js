"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.trackProvider = exports.createSoundStream = exports.getStats = exports.getMetaAsync = exports.TRACK_FACTORY_TOKEN = void 0;
const inverter_1 = require("@fridgefm/inverter");
const fs_extra_1 = __importDefault(require("fs-extra"));
const highland_1 = __importDefault(require("highland"));
const node_id3_1 = __importDefault(require("node-id3"));
const funcs_1 = require("../../utils/funcs");
const time_1 = require("../../utils/time");
const mp3_1 = __importDefault(require("../../utils/mp3"));
exports.TRACK_FACTORY_TOKEN = (0, inverter_1.createToken)('track');
const getMetaAsync = (stats) => __awaiter(void 0, void 0, void 0, function* () {
    const { fullPath, name } = stats;
    return new Promise((res) => node_id3_1.default.read(fullPath, (err, meta) => {
        const _a = meta || {}, { artist, title } = _a, rest = __rest(_a, ["artist", "title"]);
        if (!artist || !title || err) {
            const calculated = name.split(' - ');
            res({ artist: calculated[0], title: calculated[1], origin: 'fs' });
        }
        res(Object.assign(Object.assign({ artist,
            title }, rest), { origin: 'id3' }));
    }));
});
exports.getMetaAsync = getMetaAsync;
const getStats = (fullPath) => {
    const file = fs_extra_1.default.readFileSync(fullPath);
    const [directory, fullName] = (0, funcs_1.extractLast)(fullPath, '/');
    const duration = mp3_1.default.getDuration(file);
    const tagsSize = mp3_1.default.getTagsSize(file);
    const { size } = fs_extra_1.default.statSync(fullPath);
    const [name, format] = (0, funcs_1.extractLast)(fullName, '.');
    return {
        size,
        tagsSize,
        directory,
        duration,
        format,
        fullPath,
        name,
        bitrate: Math.ceil((size - tagsSize) / (duration / 1000)),
        stringified: `${name}.${format} [${Math.floor(size / 1024) / 1000}MB/${(0, time_1.getDateFromMsecs)(duration)}]`,
    };
};
exports.getStats = getStats;
const createSoundStream = ({ fullPath, bitrate, tagsSize }) => {
    try {
        if (!fs_extra_1.default.statSync(fullPath).isFile()) {
            throw new Error(`Not a file: '${fullPath}'`);
        }
        // @ts-ignore
        const hlStream = (0, highland_1.default)(fs_extra_1.default.createReadStream(fullPath, { highWaterMark: bitrate }));
        const comp = highland_1.default.seq(
        // @ts-ignore
        highland_1.default.drop(Math.floor(tagsSize / bitrate)), // remove id3tags from stream
        // @ts-ignore
        // _.slice(60, 80), // for debuggine purposes
        // @ts-ignore
        highland_1.default.ratelimit(1, 1000));
        return [null, comp(hlStream)];
    }
    catch (e) {
        // skip track if it is not accessible
        // @ts-ignore
        return [e, (0, highland_1.default)(new Array(0))];
    }
};
exports.createSoundStream = createSoundStream;
exports.trackProvider = (0, inverter_1.injectable)({
    provide: exports.TRACK_FACTORY_TOKEN,
    useValue: (fullPath) => {
        const fsStats = (0, exports.getStats)(fullPath);
        return {
            getMetaAsync: () => (0, exports.getMetaAsync)(fsStats),
            getSound: () => (0, exports.createSoundStream)(fsStats),
            fsStats,
            playCount: 0,
        };
    },
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhY2sucHJvdmlkZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvcHJvdmlkZXJzL3RyYWNrL3RyYWNrLnByb3ZpZGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsaURBQTZEO0FBQzdELHdEQUEwQjtBQUMxQix3REFBeUI7QUFDekIsd0RBQTJCO0FBQzNCLDZDQUFnRDtBQUNoRCwyQ0FBb0Q7QUFDcEQsMERBQWtDO0FBS3JCLFFBQUEsbUJBQW1CLEdBQUcsSUFBQSxzQkFBVyxFQUEyQixPQUFPLENBQUMsQ0FBQztBQUUzRSxNQUFNLFlBQVksR0FBRyxDQUFPLEtBQWlCLEVBQTZCLEVBQUU7SUFDakYsTUFBTSxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsR0FBRyxLQUFLLENBQUM7SUFFakMsT0FBTyxJQUFJLE9BQU8sQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQ3pCLGtCQUFHLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDLEdBQTBCLEVBQUUsSUFBVSxFQUFFLEVBQUU7UUFDNUQsTUFBTSxLQUE2QixJQUFJLElBQUksRUFBRSxFQUF2QyxFQUFFLE1BQU0sRUFBRSxLQUFLLE9BQXdCLEVBQW5CLElBQUksY0FBeEIsbUJBQTBCLENBQWEsQ0FBQztRQUU5QyxJQUFJLENBQUMsTUFBTSxJQUFJLENBQUMsS0FBSyxJQUFJLEdBQUcsRUFBRTtZQUM1QixNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ3JDLEdBQUcsQ0FBQyxFQUFFLE1BQU0sRUFBRSxVQUFVLENBQUMsQ0FBQyxDQUFDLEVBQUUsS0FBSyxFQUFFLFVBQVUsQ0FBQyxDQUFDLENBQUMsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztTQUNwRTtRQUNELEdBQUcsK0JBQ0QsTUFBTTtZQUNOLEtBQUssSUFDRixJQUFJLEtBQ1AsTUFB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