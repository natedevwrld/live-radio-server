"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.queuestreamProvider = exports.QUEUESTREAM_TOKEN = void 0;
const stream_1 = require("stream");
const inverter_1 = require("@fridgefm/inverter");
const dev_null_1 = __importDefault(require("dev-null"));
const time_1 = require("../../utils/time");
const events_provider_1 = require("../events/events.provider");
const prebuffer_provider_1 = require("../prebuffer/prebuffer.provider");
const playlist_provider_1 = require("../playlist/playlist.provider");
exports.QUEUESTREAM_TOKEN = (0, inverter_1.createToken)('queuestream');
exports.queuestreamProvider = (0, inverter_1.injectable)({
    provide: exports.QUEUESTREAM_TOKEN,
    scope: 'singleton',
    useFactory: (eventBus, playlist, prebuffer) => {
        let trackStream = new stream_1.Readable();
        const currentStream = new stream_1.Transform({
            transform: (chunk, _, callback) => {
                prebuffer.modify([chunk]);
                callback(undefined, chunk);
            },
        });
        const handleError = (error, event) => {
            eventBus.emit(events_provider_1.PUBLIC_EVENTS.ERROR, {
                name: 'queuestream',
                error,
                event,
            });
            publicQueuestream.next();
        };
        const publicQueuestream = {
            getPrebuffer: () => prebuffer.getStorage(),
            currentPipe: (wrstr, opts) => currentStream.pipe(wrstr, opts),
            next: () => {
                const ct = (0, time_1.captureTime)();
                const nextTrack = playlist.getNext();
                // destroy previous track stream if there was one
                trackStream === null || trackStream === void 0 ? void 0 : trackStream.destroy();
                // populate newly created stream with some handlers
                const [error, newStream] = nextTrack.getSound();
                if (error) {
                    handleError(error, 'get-sound-error');
                    return;
                }
                newStream.once('error', (e) => handleError(e, 'stream-error'));
                newStream.once('end', publicQueuestream.next);
                newStream.pipe(currentStream, { end: false });
                trackStream = newStream;
                eventBus.emit(events_provider_1.PUBLIC_EVENTS.NEXT_TRACK, nextTrack, ct());
            },
        };
        publicQueuestream.currentPipe((0, dev_null_1.default)(), { end: false });
        return publicQueuestream;
    },
    inject: [events_provider_1.EVENT_BUS_TOKEN, playlist_provider_1.PLAYLIST_TOKEN, prebuffer_provider_1.PREBUFFER_TOKEN],
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXVldWVzdHJlYW0ucHJvdmlkZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvcHJvdmlkZXJzL3F1ZXVlc3RyZWFtL3F1ZXVlc3RyZWFtLnByb3ZpZGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLG1DQUF1RDtBQUN2RCxpREFBNkQ7QUFDN0Qsd0RBQStCO0FBQy9CLDJDQUErQztBQUMvQywrREFBMkU7QUFDM0Usd0VBQWtFO0FBQ2xFLHFFQUErRDtBQUdsRCxRQUFBLGlCQUFpQixHQUFHLElBQUEsc0JBQVcsRUFBYyxhQUFhLENBQUMsQ0FBQztBQUU1RCxRQUFBLG1CQUFtQixHQUFHLElBQUEscUJBQVUsRUFBQztJQUM1QyxPQUFPLEVBQUUseUJBQWlCO0lBQzFCLEtBQUssRUFBRSxXQUFXO0lBQ2xCLFVBQVUsRUFBRSxDQUFDLFFBQVEsRUFBRSxRQUFRLEVBQUUsU0FBUyxFQUFFLEVBQUU7UUFDNUMsSUFBSSxXQUFXLEdBQUcsSUFBSSxpQkFBUSxFQUFFLENBQUM7UUFDakMsTUFBTSxhQUFhLEdBQUcsSUFBSSxrQkFBUyxDQUFDO1lBQ2xDLFNBQVMsRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDLEVBQUUsUUFBUSxFQUFFLEVBQUU7Z0JBQ2hDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO2dCQUMxQixRQUFRLENBQUMsU0FBUyxFQUFFLEtBQUssQ0FBQyxDQUFDO1lBQzdCLENBQUM7U0FDRixDQUFDLENBQUM7UUFFSCxNQUFNLFdBQVcsR0FBRyxDQUFDLEtBQVksRUFBRSxLQUFhLEVBQUUsRUFBRTtZQUNsRCxRQUFRLENBQUMsSUFBSSxDQUFDLCtCQUFhLENBQUMsS0FBSyxFQUFFO2dCQUNqQyxJQUFJLEVBQUUsYUFBYTtnQkFDbkIsS0FBSztnQkFDTCxLQUFLO2FBQ04sQ0FBQyxDQUFDO1lBQ0gsaUJBQWlCLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDM0IsQ0FBQyxDQUFDO1FBRUYsTUFBTSxpQkFBaUIsR0FBRztZQUN4QixZQUFZLEVBQUUsR0FBRyxFQUFFLENBQUMsU0FBUyxDQUFDLFVBQVUsRUFBRTtZQUMxQyxXQUFXLEVBQUUsQ0FBQyxLQUFlLEVBQUUsSUFBd0IsRUFBRSxFQUFFLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDO1lBQzNGLElBQUksRUFBRSxHQUFHLEVBQUU7Z0JBQ1QsTUFBTSxFQUFFLEdBQUcsSUFBQSxrQkFBVyxHQUFFLENBQUM7Z0JBQ3pCLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQyxPQUFPLEVBQUUsQ0FBQztnQkFFckMsaURBQWlEO2dCQUNqRCxXQUFXLGFBQVgsV0FBVyx1QkFBWCxXQUFXLENBQUUsT0FBTyxFQUFFLENBQUM7Z0JBRXZCLG1EQUFtRDtnQkFDbkQsTUFBTSxDQUFDLEtBQUssRUFBRSxTQUFTLENBQUMsR0FBRyxTQUFTLENBQUMsUUFBUSxFQUFFLENBQUM7Z0JBQ2hELElBQUksS0FBSyxFQUFFO29CQUNULFdBQVcsQ0FBQyxLQUFLLEVBQUUsaUJBQWlCLENBQUMsQ0FBQztvQkFDdEMsT0FBTztpQkFDUjtnQkFFRCxTQUFTLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsV0FBVyxDQUFDLENBQUMsRUFBRSxjQUFjLENBQUMsQ0FBQyxDQUFDO2dCQUMvRCxTQUFTLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFDOUMsU0FBUyxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztnQkFFOUMsV0FBVyxHQUFHLFNBQVMsQ0FBQztnQkFFeEIsUUFBUSxDQUFDLElBQUksQ0FBQywrQkFBYSxDQUFDLFVBQVUsRUFBRSxTQUFTLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztZQUMzRCxDQUFDO1NBQ0YsQ0FBQztRQUVGLGlCQUFpQixDQUFDLFdBQVcsQ0FBQyxJQUFBLGtCQUFPLEdBQUUsRUFBRSxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO1FBRXpELE9BQU8saUJBQWlCLENBQUM7SUFDM0IsQ0FBQztJQUNELE1BQU0sRUFBRSxDQUFDLGlDQUFlLEVBQUUsa0NBQWMsRUFBRSxvQ0FBZSxDQUFVO0NBQ3BFLENBQUMsQ0FBQyJ9